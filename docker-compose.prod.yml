# ============================================================================
# IntegrityX Production Docker Compose
# Optimized for production deployment with nginx reverse proxy
# ============================================================================

version: '3.8'

services:
  # ==========================================================================
  # PostgreSQL Database (Production)
  # ==========================================================================
  postgres:
    image: postgres:16-alpine
    container_name: integrityx_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - integrityx-network
    # No port exposure - only accessible within network

  # ==========================================================================
  # Redis (Production)
  # ==========================================================================
  redis:
    image: redis:7-alpine
    container_name: integrityx_redis_prod
    volumes:
      - redis_data_prod:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - integrityx-network

  # ==========================================================================
  # Backend (FastAPI) - Production
  # ==========================================================================
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: integrityx_backend_prod
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      ENVIRONMENT: production
      DEBUG: "false"
      CLERK_SECRET_KEY: ${CLERK_SECRET_KEY}
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}
      WALACOR_API_KEY: ${WALACOR_API_KEY}
      WALACOR_API_URL: ${WALACOR_API_URL}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      API_BASE_URL: ${API_BASE_URL}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./database:/app/database
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn backend.main:app --host 0.0.0.0 --port 8000 --workers 4 --proxy-headers
    restart: unless-stopped
    networks:
      - integrityx-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # ==========================================================================
  # Frontend (Next.js) - Production
  # ==========================================================================
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: runner
    container_name: integrityx_frontend_prod
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}
      CLERK_SECRET_KEY: ${CLERK_SECRET_KEY}
      NODE_ENV: production
      NEXT_TELEMETRY_DISABLED: 1
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - integrityx-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # ==========================================================================
  # Nginx Reverse Proxy
  # ==========================================================================
  nginx:
    image: nginx:alpine
    container_name: integrityx_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./frontend/public:/usr/share/nginx/html/public:ro
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - integrityx-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

# ==========================================================================
# Networks
# ==========================================================================
networks:
  integrityx-network:
    driver: bridge

# ==========================================================================
# Volumes
# ==========================================================================
volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local



